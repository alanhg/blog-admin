{
  "content": "---\ntitle: 项目中Less与CSS modules的实践\ntags:\n  - CSS\n  - CSS Modules\n  - Less\n  - FrontEnd\nabbrlink: 32c4cd52\ndate: 2019-09-01 22:46:00\n---\n> 最近接手的项目前端，关于样式这块用到了Less和CSS modules，这里梳理总结一番。\n \n![](http://static.1991421.cn/2019-08-26-145228.jpg)\n\nshow实际代码之前，有必要先从背景上了解下两者。\n\n## Less为何物\n我们要知道，前端三要素，CSS，HTML，JavaScript。CSS主打样式问题，HTML主打内容，JS控制交互，这是基础，也是基石。\n\n但我们也知道CSS过于僵硬，你可以说它写的都是静态量。我们习惯于面向对象，我们习惯于公式，另外即使对于CSS，我们也希望能够DRY。等等。so能不能加强下CSS呢。那么LESS就出来了。\n\n> Less (which stands for Leaner Style Sheets) is a backwards-compatible language extension for CSS. This is the official documentation for Less, the language and Less.js, the JavaScript tool that converts your Less styles to CSS styles.\n\n一句话，LESS是CSS预处理器。除了LESS，还有SCSS，但大差不差。最终在现有项目中，我确定用LESS。\n\n原因有两个\n\n1. UI组件库我们选择了antd，antd本身使用的是LESS,尽可能与其保持一致有利于我们UI整体的掌控\n2. 写法上，个人习惯了Less\n\n## Less优势\n\nless的优势，也正是css本身无法解决的痛点，正如上面所介绍的，使用less可以让我们，利用变量和公式等更好的重用CSS。\n\n## CSS Modules为何物\n> A CSS Module is a CSS file in which all class names and animation names are scoped locally by default. All URLs (url(...)) and @imports are in module request format (./xxx and ../xxx means relative, xxx and xxx/yyy means in modules folder, i. e. in node_modules).\n\n`一句话来说就是一个CSS模块就是一个CSS文件，文件中所有的类名和动画名都有其各自的作用域。`\n\n### 唠叨下我上一个项目前端\n\n> 先说下之前的项目，使用了less，没有使用CSS module，对于样式没有局部作用域和全局作用域的区分，样式命名上也是群星璀璨。最终对于样式这块带来的严重的后果就是，会出现很多的!important,很多的拆了东墙补西墙。样式整体也没有很好的规划设计，复用性为0.维护性我认为也为0`悲观来说`\n\n怎么解决呢。为此，我痛定思痛，决定使用CSS Modules。\n\n## 上代码\n\n### 项目技术背景\n- TypeScript`~3.3.1`\n- React`16.4.2`\n- Webpack`4.17.1`\n\n了解了背景前提，开搞。\n\n## typings.d.ts\n为了支持Less在TS组件下以模块形式导入，需要做下声明\n\ntypings.d.ts\n\n```typescript\ndeclare module '*.less';\n\n```\n\n## Webpack.js\n\nwebpack中需要增加对应的rule\n\n```javascript\n{\n        test: /\\.less$/,\n        use: [\n          require.resolve('style-loader'),\n          {\n            loader: require.resolve('css-loader'),\n            options: {\n              importLoaders: 1,\n              localsConvention: 'camelCase',\n              modules: {\n                mode: 'local',\n                localIdentName: '[name]_[local]_[hash:base64:5]'\n              },\n              sourceMap: options.env !== 'production'\n            }\n          },\n          {\n            loader: require.resolve('less-loader'),\n            options: {\n              javascriptEnabled: true,\n              sourceMap: options.env !== 'production'\n            }\n          }\n        ]\n      }\n```\n\n有几点注意\n\n1. sourceMap配置是为了在开发环境下，方便Less调试\n2. css module的开启是在css-loader，而非less-loader中\n\n\n## React项目下样式书写\n\n### local\n\nfooter.less\n\n```\n.footer {\n  background-color: rgb(0, 0, 0);\n  color: #999999;\n  padding: 49px 155px 70px;\n  font-size: 14px;\n  letter-spacing: 0;\n  text-align: left;\n  line-height: 18px;\n  }\n```\n\n![](http://static.1991421.cn/2019-09-01-134344.png)\n\n#### 最终效果\n\n![](http://static.1991421.cn/2019-09-02-115014.png)\n\n### global\n全局样式的书写只要加上:gloabl选择器即可。另外在解析时，不会改变类名称\n\n```css\n:global {\n  .table-tip {\n    font-family: @font-bold;\n    font-size: 12px;\n    color: @blue;\n    letter-spacing: 0;\n    text-align: center;\n    background: @light-blue;\n    border-radius: 5px;\n    padding-top: 16px;\n    padding-bottom: 16px;\n    padding-left: 22px;\n  \n```\n\n全局样式在各个组件下都可以正常使用，使用方式时直接className即可\n\n```html\n<div className=\"table-tip\">\n            <FormattedMessage id={'tip'} />\n          </div>\n```\n#### 最终效果\n![](http://static.1991421.cn/2019-09-02-114926.png)\n\n## 样式整体规划设计\n因为有了less和css modules的加持，对于项目整体的样式，我进行了下规划设计\n\n### theme\n\napp项目中，我单独建立了文件夹叫theme\n\n```\n.\n├── antd.less\n├── company.less\n└── theme.less\n```\n\n- antd.less用于重写默认的风格，比如按钮颜色，窗体大小间距,表单样式等\n- theme.less下定义字体变量，网站整体的基础色系等\n- company.less的存在，是因为我考虑提取在项目开发的同时，将项目通用样式抽离到company下，形成一套公司统一风格的UI样式，因为当前背景时公司的N个项目遵从统一的风格，那么在这个项目推进的同时，将其抽离出去，以后只要同步了theme整个文件夹，那么基础UI就有了。DRY嘛。假如不考虑项目样式的重用性，这个文件可以删除。\n\n### app.less\n这里是用于全局`global`的样式定义，当然也会导入theme下声明的antd样式，从而在加载时覆盖了默认的样式，同时导入了theme变量。\n\n### component.less\n有了全局的样式，再加上全局定义的一系列变量，那么对于单个组件下，只需要按需创建自己的个性化样式即可。对于字体及颜色等通用值设定，导入theme.less即可。\n\n## 说说Angular下的样式模块化方案\n因为之前我玩过Angular2，人家是个框架，自带全套解决方案。我们索性聊聊它是怎么处理样式模块化问题的。\n\n`我们现在讨论的Angular指的是Angular2及以后，现在最新版本是`9.0.0-next.4`。`\n\n贴下我写的组件样式，最终解析结果如下。\n\nhome.component.css\n\n```css\nh1[class='say hello'] {\n    color: red;\n}\n```\n\n![](http://static.1991421.cn/2019-09-01-140741.png)\n\n看到这里你应该就明白了，它实质上是利用了CSS属性选择器做到了CSS模块化，对比CSS module的CSS类名方案，其实会发现两者异曲同工。\n\n## 写在最后\n假如不采用CSS Modules方案，利用BEM等也不不能解决问题。但不可否认，这个方案更优雅。基于以上的设定，我们的样式就不会出现意外影响，混乱不堪的局面。\n\n当然好的工具是一方面，更重要的是使用工具的Team，形成统一的认知。so，加油！\n\n## 相关文档\n- https://github.com/css-modules/css-modules\n- [CSS Modules入门Ⅰ：它是什么？为什么要使用它？](https://zhuanlan.zhihu.com/p/23571898)\n- [CSS Modules 模块化方案](https://zhuanlan.zhihu.com/p/20495964)\n- [BEM](https://css-tricks.com/bem-101/)\n- [Angular组件样式](https://angular.io/guide/component-styles)\n\n\n",
  "title": "项目中Less与CSS-modules的实践"
}
